version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auction_postgres
    environment:
      POSTGRES_USER: auction_user
      POSTGRES_PASSWORD: auction_pass
      POSTGRES_DB: auction_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auction-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auction_user -d auction_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auction_redis
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - auction-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: auction_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
      - "9301:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - auction-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 20s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: auction_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: rabbit_pass
    ports:
      - "5673:5672"
      - "15673:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - auction-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: auction_api_gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    ports:
      - "8090:8080"
    depends_on:
      - eureka-server
    networks:
      - auction-network
    restart: unless-stopped

  # Eureka Server
  eureka-server:
    build:
      context: ./backend/eureka-server
      dockerfile: Dockerfile
    container_name: auction_eureka
    ports:
      - "8762:8761"
    networks:
      - auction-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auction Service
  auction-service:
    build:
      context: ./backend/auction-service
      dockerfile: Dockerfile
    container_name: auction_service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auction_db
      DB_USERNAME: auction_user
      DB_PASSWORD: auction_pass
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      ELASTICSEARCH_HOST: elasticsearch
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbit_user
      RABBITMQ_PASSWORD: rabbit_pass
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - auction-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: user_db
      DB_USERNAME: auction_user
      DB_PASSWORD: auction_pass
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbit_user
      RABBITMQ_PASSWORD: rabbit_pass
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - auction-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_db
      DB_USERNAME: auction_user
      DB_PASSWORD: auction_pass
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbit_user
      RABBITMQ_PASSWORD: rabbit_pass
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - auction-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: notification_service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_password
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USERNAME: rabbit_user
      RABBITMQ_PASSWORD: rabbit_pass
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - auction-network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./backend/analytics-service
      dockerfile: Dockerfile
    container_name: analytics_service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: analytics_db
      DB_USERNAME: auction_user
      DB_PASSWORD: auction_pass
      ELASTICSEARCH_HOST: elasticsearch
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - auction-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:8090
    container_name: auction_frontend
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - auction-network
    restart: unless-stopped

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: auction_nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - auction-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  elastic_data:
  rabbitmq_data:

networks:
  auction-network:
    driver: bridge